@{ 
    ViewData["title"] = "Code Reviews in Practice";
}

<article>
    <header class="entry-header">
        <h1 class="entry-title">Code Reviews in Practice</h1>
        <div class="entry-meta">
            <span class="posted-on">Posted on <a href="http://www.develothink.com/code-reviews-in-practice/" rel="bookmark"><time class="entry-date published" datetime="2015-12-25T10:42:15+00:00">December 25, 2015</time></a></span>
        </div>
    </header>
    <div class="entry-content">
        <p>Code reviews are an invaluable practice that many software development teams often over look. This article explains how to put them in practice. The hope is, by establishing the key elements of code reviews, developers can more confidently work code reviews into their software development process and team environments.</p>
        <h3>Why do we do code reviews?</h3>
        <p>Code reviews have a number of benefits. A small list of the benefits include:</p>
        <ul>
            <li>A different or new perspective can spot potential issues that the original developer may not have seen.</li>
            <li>Reviewers bring experience from past projects and can identify common pitfalls that they have had to work through.</li>
            <li>Learning can go two ways: Both reviewees and reviewers have potential for learning patterns from each other.</li>
            <li>Socialization of how new software is written. This allows us to gain insight into what projects have solved what problems, and having the ability to reference that code for use in future projects.</li>
            <li>Knowing that your code will be reviewed can lead to better programming practices.</li>
        </ul>
        <h3>What does a code review entail?</h3>
        <p>Ideally, code reviews are no more than a dialog between two or more developers about a finite amount of newly written code. (&#8220;Just talking &#8217;bout some code bro.&#8221;) The amount of code should be small enough so that the code review can be done relatively quickly and encapsulates a related set of features.</p>
        <p>The developer who wrote the code should provide reviewer(s) with relevant background information about the problem that needed to be solved and then proudly speak to and show the code that was written. The crucial keyword at this step is <strong>proudly</strong>. Before getting to the point of code review, developers should ensure that the code they are writing lives up to their team&#8217;s code quality standards and they are also satisfied with the pattern of implementation. If they are not able to come to satisfactory pattern for implementation, reaching out to team members for help is always a good choice. <em>Better to ask for another eye on a problem early than to waste time and brain cells on something that ultimately will need to be refactored</em>.</p>
        <p>Once the code has been spoken to, it is the reviewers job to <strong>ask questions</strong>. Coming up with and asking questions is the key to to successful code reviews as it challenges both the original developer and the reviewer to look at the problem being solved and the code in a new light.</p>
        <p>In addition to asking good questions about the code, there are a few other questions reviewers should be asking themselves:</p>
        <ul>
            <li>Is the code easy understand? Should it be refactored or are comments needed?</li>
            <li>Are there any areas that can be optimized?</li>
            <li>Is there repetitive code that can be broken out into a re-usable method?</li>
            <li>Are coding standards being followed?</li>
            <li>What can I learn from this?</li>
        </ul>
        <h3>When should we do code reviews?</h3>
        <p>Just like voting in Illinois, code reviews should be done early and often. A good rule of thumb is any time you are creating new code that is adding a feature or solving a problem in existing software, you should ask for a code review. In addition, it can also be useful from time to time to ask for a code review on common programming tasks.</p>
        <h3>Who should do code reviews?</h3>
        <p>Everyone. Literally every developer regardless of levels of experience should ask for code reviews.</p>
        <h3>Code reviews are NOT a judgement on the code being reviewed</h3>
        <p>Finally and perhaps often overlooked, the intent of code reviews is NOT to cast judgement on the work product that your peer developer has worked so hard on. Plain and simple, don&#8217;t be a jerk and also don&#8217;t be afraid about your work being judged.</p>

    </div>
</article>